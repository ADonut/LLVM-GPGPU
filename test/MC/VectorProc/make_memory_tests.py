import random, sys

print '# RUN: llvm-mc -arch=vectorproc -show-encoding %s | FileCheck %s'
print '# This file auto-generated by ' + sys.argv[0]

def make_encoding(x):
	str = ' ; CHECK: encoding: ['
	for y in range(4):
		if y != 0:
			str += ','
			
		str += '0x%02x' % (x & 0xff)
		x >>= 8

	return str + ']'

def make_c_instruction(isLoad, op, srcDest, ptr, offs, mask):
	offs /= 4
	return make_encoding((1 << 31) | (isLoad << 29) | (op << 25) | (offs << 15) 
		| (mask << 10) | (srcDest << 5) | ptr)

def make_cprime_instruction(isLoad, op, srcDest, ptr, offs):
	offs /= 4
	return make_encoding((1 << 31) | (isLoad << 29) | (op << 25) | (offs << 10) 
		| (srcDest << 5) | ptr)
		
# Scalar load/stores
print 'load.u8 s10, 20(s5)' + make_cprime_instruction(1, 0, 10, 5, 20)
print 'load.u8 s11, (s6)' + make_cprime_instruction(1, 0, 11, 6, 0)
print 'load.s8 s10, 20(s5)' + make_cprime_instruction(1, 1, 10, 5, 20)
print 'load.s8 s11, (s6)' + make_cprime_instruction(1, 1, 11, 6, 0)
print 'load.u16 s12, 30(s7)' + make_cprime_instruction(1, 2, 12, 7, 30)
print 'load.u16 s13, (s8)' + make_cprime_instruction(1, 2, 13, 8, 0)
print 'load.s16 s12, 30(s7)' + make_cprime_instruction(1, 3, 12, 7, 30)
print 'load.s16 s13, (s8)' + make_cprime_instruction(1, 3, 13, 8, 0)
print 'load.32 s14, 40(s9)' + make_cprime_instruction(1, 4, 14, 9, 40)
print 'load.32 s15, (s10)' + make_cprime_instruction(1, 4, 15, 10, 0)
print 'store.8 s1, 50(s2)' + make_cprime_instruction(0, 1, 1, 2, 50)
print 'store.16 s3, 60(s4)' + make_cprime_instruction(0, 3, 3, 4, 60)
print 'store.32 s5, 70(s6)' + make_cprime_instruction(0, 4, 5, 6, 70)

# Vector load/stores
if False:
	print 'load.v v2, 20(s5)' + make_cprime_instruction(0, 7, 2, 5, 20)
	print 'load.v v3, (s6)' + make_cprime_instruction(0, 7, 3, 6, 0)
	print 'load.v.mask v2, s7, 20(s5)' + make_c_instruction(0, 8, 2, 5, 20, 7)
	print 'load.v.mask v3, s7, (s6)' + make_c_instruction(0, 8, 3, 6, 0, 7)
	print 'store.v v2, 20(s5)' + make_cprime_instruction(1, 7, 2, 5, 20)
	print 'store.v v3, (s6)' + make_cprime_instruction(1, 7, 3, 6, 0)
	print 'store.v.mask v2, s7, 20(s5)' + make_c_instruction(1, 8, 2, 5, 20, 7)
	print 'store.v.mask v3, s7, (s6)' + make_c_instruction(1, 8, 3, 6, 0, 7)

# PC relative label offset
print  '''
foo: .word bar
	load.32 s4, foo		# CHECK: encoding: [0x9f,0bAAAAAA00,A,0b1010100A]
		# CHECK: fixup A - offset: 0, value: foo, kind: fixup_VectorProc_PCRel_MemAccExt
'''
